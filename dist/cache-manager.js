"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasLock = hasLock;
exports.lock = lock;
exports.unlock = unlock;
exports.serveCache = serveCache;
exports.send = send;
var _stream = require("stream");
var _payload = require("./payload");
var _utils = require("./utils");
const MAX_WAIT = 10000 // 10 seconds
;
const WAIT_INTERVAL = 10 // 10 ms
;
async function hasLock(key, cache) {
    return await cache.has('lock:' + key) === 'hit';
}
async function lock(key, cache) {
    await cache.set('lock:' + key, Buffer.from('lock'), MAX_WAIT / 1000) // in seconds
    ;
}
async function unlock(key, cache) {
    await cache.del('lock:' + key);
}
async function serveCache(cache, key, forced) {
    if (forced) return {
        status: 'force'
    };
    try {
        const status = await cache.has('payload:' + key);
        if (status === 'hit') {
            const payload = (0, _payload).decodePayload(await cache.get('payload:' + key));
            return {
                status: 'hit',
                payload
            };
        } else if (status === 'miss') {
            const lock1 = await hasLock(key, cache);
            // non first-time miss (the cache is being created), wait for the cache
            return !lock1 ? {
                status: 'miss'
            } : waitAndServe(key, cache);
        } else {
            // stale
            const payload = (0, _payload).decodePayload(await cache.get('payload:' + key));
            return {
                status: 'stale',
                payload
            };
        }
    } catch (e) {
        const error = e;
        (0, _utils).log('error', 'Cache lookup error', {
            key,
            errorMessage: error.message,
            errorStack: error.stack
        });
        return {
            status: 'miss'
        };
    }
}
async function waitAndServe(key, cache) {
    while(await hasLock(key, cache)){
        // lock will expire
        await (0, _utils).sleep(WAIT_INTERVAL);
    }
    const status = await cache.has('payload:' + key);
    // still no cache after waiting for MAX_WAIT
    if (status === 'miss') {
        return {
            status: 'timeout'
        };
    } else {
        const payload = (0, _payload).decodePayload(await cache.get('payload:' + key));
        return {
            status: 'fulfill',
            payload
        };
    }
}
function send(payload, res) {
    const { body , headers  } = payload;
    if (!body) {
        res.statusCode = 504;
        return res.end();
    }
    for(const k in headers){
        res.setHeader(k, headers[k]);
    }
    res.statusCode = 200;
    res.removeHeader('transfer-encoding');
    res.setHeader('content-length', Buffer.byteLength(body));
    res.setHeader('content-encoding', 'gzip');
    const stream = new _stream.PassThrough();
    stream.pipe(res);
    stream.end(body);
}

//# sourceMappingURL=data:application/json;base64,