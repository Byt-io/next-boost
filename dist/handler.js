"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = CachedHandler;
var _zlib = require("zlib");
var _cacheManager = require("./cache-manager");
var _metrics = require("./metrics");
var _payload = require("./payload");
var _renderer = _interopRequireDefault(require("./renderer"));
var _utils = require("./utils");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function matchRules(conf, req) {
    var _method;
    const err = [
        'GET',
        'HEAD'
    ].indexOf((_method = req.method) != null ? _method : '') === -1;
    if (err) return {
        matched: false,
        ttl: -1
    };
    if (typeof conf.rules === 'function') {
        const ttl = conf.rules(req);
        if (ttl) return {
            matched: true,
            ttl
        };
    } else {
        var _rules;
        for (const rule of (_rules = conf.rules) != null ? _rules : []){
            if (req.url && new RegExp(rule.regex).test(req.url)) {
                return {
                    matched: true,
                    ttl: rule.ttl
                };
            }
        }
    }
    return {
        matched: false,
        ttl: 0
    };
}
/**
 * Wrap a http listener to serve cached response
 *
 * @param cache the cache
 * @param conf conf of next-boost
 * @param renderer the SSR renderer runs in worker thread
 * @param next pass-through handler
 *
 * @returns a request listener to use in http server
 */ const wrap = (cache, conf, renderer, next, metrics)=>{
    return async (req, res)=>{
        if (conf.metrics && (0, _metrics).forMetrics(req)) return (0, _metrics).serveMetrics(metrics, res);
        var _url;
        req.url = (0, _utils).filterUrl((_url = req.url) != null ? _url : '', conf.paramFilter);
        const key = conf.cacheKey ? conf.cacheKey(req) : req.url;
        const { matched , ttl  } = matchRules(conf, req);
        if (!matched) {
            metrics.inc('bypass');
            res.setHeader('x-next-boost-status', 'bypass');
            return next(req, res);
        }
        const lookupStart = new Date().getTime();
        const forced = req.headers['x-next-boost'] === 'update' // forced
        ;
        const state = await (0, _cacheManager).serveCache(cache, key, forced);
        res.setHeader('x-next-boost-status', state.status);
        metrics.inc(state.status);
        if (state.status === 'stale' || state.status === 'hit' || state.status === 'fulfill') {
            (0, _cacheManager).send(state.payload, res);
            if (!conf.quiet) {
                (0, _utils).log('info', 'URL served from cache', {
                    url: req.url,
                    cacheStatus: state.status,
                    cacheLookupMs: new Date().getTime() - lookupStart
                });
            }
            if (state.status !== 'stale') return; // stop here
        }
        try {
            const renderStart = new Date().getTime();
            await (0, _cacheManager).lock(key, cache);
            const args = {
                path: req.url,
                headers: req.headers,
                method: req.method
            };
            const rv = await renderer.render(args);
            if (ttl && rv.statusCode === 200 && conf.cacheControl) {
                rv.headers['cache-control'] = conf.cacheControl(req, ttl);
            }
            // rv.body is a Buffer in JSON format: { type: 'Buffer', data: [...] }
            const body = Buffer.from(rv.body);
            // stale has been served
            if (state.status !== 'stale') (0, _utils).serve(res, rv);
            if (!conf.quiet) {
                (0, _utils).log(rv.statusCode < 400 ? 'info' : 'warn', 'URL rendered', {
                    url: req.url,
                    cacheStatus: state.status,
                    cacheLookupMs: new Date().getTime() - lookupStart,
                    renderStatus: rv.statusCode,
                    renderMs: new Date().getTime() - renderStart
                });
            }
            if (rv.statusCode === 200) {
                // save gzipped data
                const payload = {
                    headers: rv.headers,
                    body: (0, _utils).isZipped(rv.headers) ? body : (0, _zlib).gzipSync(body)
                };
                await cache.set('payload:' + key, (0, _payload).encodePayload(payload), ttl);
            }
        } catch (e) {
            const error = e;
            (0, _utils).log('error', 'Render error', {
                key,
                errorMessage: error.message,
                errorStack: error.stack
            });
        } finally{
            await (0, _cacheManager).unlock(key, cache);
        }
    };
};
async function CachedHandler(args, options) {
    (0, _utils).log('info', 'Preparing cache adapter');
    // merge config
    const conf = (0, _utils).mergeConfig(options);
    // the cache
    if (!conf.cacheAdapter) {
        const { Adapter  } = require('@next-boost/hybrid-disk-cache');
        conf.cacheAdapter = new Adapter();
    }
    const adapter = conf.cacheAdapter;
    const cache = await adapter.init();
    const renderer = (0, _renderer).default();
    await renderer.init(args);
    const plain = await require(args.script).default(args);
    const metrics = new _metrics.Metrics();
    // init the child process for revalidate and cache purge
    return {
        handler: wrap(cache, conf, renderer, plain, metrics),
        cache,
        close: async ()=>{
            renderer.kill();
            await adapter.shutdown();
        }
    };
}

//# sourceMappingURL=data:application/json;base64,